#!/usr/bin/env python

""" Parse log file generated by OMEGA conformational search and
    output .txt file containing info of all molecules with warnings.

    Author: Roy Nguyen
    Last edited: June 20, 2019
"""


import sys
import os

log_folder = "Conformers-Logs"

def main():
    cwd = os.getcwd()
    log_folder_path = form_path(cwd, log_folder)
    log_files = os.listdir(log_folder_path)
    for log in log_files:
        if "Fails" not in log:
            parse_log(log, log_folder_path)
    #parse_log("Spectrum_ED.txt", log_folder_path)    # Debugging purposes
    
    sys.stdout.write("Script finished! \n")
    return

def parse_log(log_file, log_folder):
    '''
    Filter log file for only molecules with warnings into seperate .txt file

    Args:
        log_file (string): name of log file
        log_folder (string): path to folder containing log files
    '''
    library_name = log_file[:log_file.index(".txt")]
    log_path = form_path(log_folder, log_file)
    output_name = library_name + "_Fails.txt"
    output_path = form_path(log_folder, output_name)
    output_txt = ""
    # Parse log file
    sys.stdout.write("Parsing log file of " + library_name + "...\n")
    with open(log_path, "r") as log:
        num_molecules = 0
        num_warnings = 0
        curr_molecule = ""
        for line in log:
            if "Title" in line:
                curr_molecule = "Molecule: " + line[line.index("=")+2:] + "\n"
                num_molecules += 1
            if "Warning" in line:
                curr_molecule += line
            if "---" in line and "Warning" in curr_molecule:
                if "failed" in curr_molecule:
                    curr_molecule = "FAILED \n" + curr_molecule
                curr_molecule += "----------------------------------\n"
                output_txt += curr_molecule
                num_warnings += 1
                curr_molecule = ""
            if "Processed" in line:
                num_fails = output_txt.count("failed")
                output_txt += line
                output_txt += "Number of Warnings = " + str(num_warnings) + "\n"
                output_txt += "Number of Molecules Failed = " + str(num_fails)

    # Write output
    with open(output_path, "w") as output:
        output.write(output_txt)

    sys.stdout.write("Done with " + library_name + "!\n")
    sys.stdout.write("\n")
    return


def form_path(start, end):
    '''
    Create string representing a path depending on
    Windows/Linux environment

    Args:
        start (string): start of output path
        end (string): string to add to end of start

    Return:
        (string): full path combining start and end
    '''
    path = ""
    if "/" in start:
        path = start + "/" + end
    elif "\\" in start:
        path = start + "\\" + end
    return path
    
if __name__ == "__main__":
    main()